/*
 * corsaro
 *
 * Alistair King, CAIDA, UC San Diego
 * Shane Alcock, WAND, University of Waikato
 *
 * corsaro-info@caida.org
 *
 * Copyright (C) 2012-2019 The Regents of the University of California.
 * All Rights Reserved.
 *
 * This file is part of corsaro.
 *
 * Permission to copy, modify, and distribute this software and its
 * documentation for academic research and education purposes, without fee, and
 * without a written agreement is hereby granted, provided that
 * the above copyright notice, this paragraph and the following paragraphs
 * appear in all copies.
 *
 * Permission to make use of this software for other than academic research and
 * education purposes may be obtained by contacting:
 *
 * Office of Innovation and Commercialization
 * 9500 Gilman Drive, Mail Code 0910
 * University of California
 * La Jolla, CA 92093-0910
 * (858) 534-5815
 * invent@ucsd.edu
 *
 * This software program and documentation are copyrighted by The Regents of the
 * University of California. The software program and documentation are supplied
 * “as is”, without any accompanying services from The Regents. The Regents does
 * not warrant that the operation of the program will be uninterrupted or
 * error-free. The end-user understands that the program was developed for
 * research purposes and is advised not to rely exclusively on the program for
 * any reason.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
 * EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED
 * HEREUNDER IS ON AN “AS IS” BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO
 * OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
 * MODIFICATIONS.
 */

#ifndef LIBCORSARO_H_
#define LIBCORSARO_H_

#include <inttypes.h>

#define CORSARO_USE_PACKED @HAVE_ATTRIBUTE_PACKED@
#define CORSARO_USE_UNUSED @HAVE_ATTRIBUTE_UNUSED@
#define CORSARO_USE_DEPRECATED @HAVE_ATTRIBUTE_DEPRECATED@
#define CORSARO_USE_PURE @HAVE_ATTRIBUTE_PURE@
#define CORSARO_USE_PRINTF @HAVE_ATTRIBUTE_FORMAT@
#define CORSARO_USE_VISIBILITY @HAVE_VISIBILITY@

#if CORSARO_USE_PACKED
#  define PACKED __attribute__((packed))
#else
#  define PACKED
#endif

#if CORSARO_USE_UNUSED
#  define UNUSED __attribute__((unused))
#else
#  define UNUSED
#endif

#if CORSARO_USE_DEPRECATED
#  define DEPRECATED __attribute__((deprecated))
#else
#  define DEPRECATED
#endif

#if CORSARO_USE_PURE
#  define SIMPLE_FUNCTION __attribute__((pure))
#else
#  define SIMPLE_FUNCTION
#endif

#if CORSARO_USE_PRINTF
#  define PRINTF(formatpos, argpos) __attribute__((format(printf,formatpos, argpos)))
#else
#  define PRINTF(formatpos, argpos)
#endif

/** The framing length of ERF ethernet packets (ERF header len + 2
 * bytes of padding) */
#define CORSARO_ERF_ETHERNET_FRAMING 18

#define CORSARO_MAGIC (0x45444752)
#define CORSARO_MAGIC_INTERVAL (0x494E5452)

typedef struct corsaro_fin_interval corsaro_fin_interval_t;
typedef struct corsaro_interval corsaro_interval_t;

#define CORSARO_IO_PLUGIN_PATTERN 'P'
#define CORSARO_IO_MONITOR_PATTERN 'N'
#define CORSARO_IO_TRACE_FORMAT_PATTERN 'f'

typedef enum {
    CORSARO_MERGE_TYPE_OVERLAPPING,
    CORSARO_MERGE_TYPE_DISTINCT
} corsaro_merge_style_t;

typedef enum {
    CORSARO_OUTPUT_AVRO,
    CORSARO_OUTPUT_LIBTIMESERIES,
    CORSARO_OUTPUT_KAFKA,
    CORSARO_OUTPUT_TRACE
} corsaro_output_format_t;

typedef enum corsaro_result_type {
    CORSARO_RESULT_TYPE_BLANK,
    CORSARO_RESULT_TYPE_EOF,
    CORSARO_RESULT_TYPE_DATA,
} corsaro_result_type_t;


struct corsaro_interval {
    uint32_t corsaro_magic;
    uint32_t magic;
    uint32_t number;
    uint32_t time;
    uint8_t isstart;
};

struct corsaro_fin_interval {
    uint32_t interval_id;
    uint32_t timestamp;
    uint16_t threads_ended;
    uint8_t rotate_after;
    void ***thread_plugin_data;
    corsaro_fin_interval_t *next;
};

#endif
// vim: set sw=4 tabstop=4 softtabstop=4 expandtab :
