/*
 * corsaro
 *
 * Alistair King, CAIDA, UC San Diego
 * Shane Alcock, WAND, University of Waikato
 *
 * corsaro-info@caida.org
 *
 * Copyright (C) 2012 The Regents of the University of California.
 *
 * This file is part of corsaro.
 *
 * corsaro is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * corsaro is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with corsaro.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef LIBCORSARO_H_
#define LIBCORSARO_H_

#include <inttypes.h>

#define CORSARO_USE_PACKED @HAVE_ATTRIBUTE_PACKED@
#define CORSARO_USE_UNUSED @HAVE_ATTRIBUTE_UNUSED@
#define CORSARO_USE_DEPRECATED @HAVE_ATTRIBUTE_DEPRECATED@
#define CORSARO_USE_PURE @HAVE_ATTRIBUTE_PURE@
#define CORSARO_USE_PRINTF @HAVE_ATTRIBUTE_FORMAT@
#define CORSARO_USE_VISIBILITY @HAVE_VISIBILITY@

#if CORSARO_USE_PACKED
#  define PACKED __attribute__((packed))
#else
#  define PACKED
#endif

#if CORSARO_USE_UNUSED
#  define UNUSED __attribute__((unused))
#else
#  define UNUSED
#endif

#if CORSARO_USE_DEPRECATED
#  define DEPRECATED __attribute__((deprecated))
#else
#  define DEPRECATED
#endif

#if CORSARO_USE_PURE
#  define SIMPLE_FUNCTION __attribute__((pure))
#else
#  define SIMPLE_FUNCTION
#endif

#if CORSARO_USE_PRINTF
#  define PRINTF(formatpos, argpos) __attribute__((format(printf,formatpos, argpos)))
#else
#  define PRINTF(formatpos, argpos)
#endif

/** The framing length of ERF ethernet packets (ERF header len + 2
 * bytes of padding) */
#define CORSARO_ERF_ETHERNET_FRAMING 18

#define CORSARO_MAGIC (0x45444752)
#define CORSARO_MAGIC_INTERVAL (0x494E5452)

typedef struct corsaro_fin_interval corsaro_fin_interval_t;
typedef struct corsaro_interval corsaro_interval_t;

#define CORSARO_IO_PLUGIN_PATTERN 'P'
#define CORSARO_IO_MONITOR_PATTERN 'N'
#define CORSARO_IO_TRACE_FORMAT_PATTERN 'f'

typedef enum {
    CORSARO_MERGE_TYPE_OVERLAPPING,
    CORSARO_MERGE_TYPE_DISTINCT
} corsaro_merge_style_t;

typedef enum {
    CORSARO_OUTPUT_AVRO,
    CORSARO_OUTPUT_LIBTIMESERIES,
    CORSARO_OUTPUT_KAFKA,
    CORSARO_OUTPUT_TRACE
} corsaro_output_format_t;

typedef enum corsaro_result_type {
    CORSARO_RESULT_TYPE_BLANK,
    CORSARO_RESULT_TYPE_EOF,
    CORSARO_RESULT_TYPE_DATA,
} corsaro_result_type_t;


struct corsaro_interval {
    uint32_t corsaro_magic;
    uint32_t magic;
    uint32_t number;
    uint32_t time;
    uint8_t isstart;
};

struct corsaro_fin_interval {
    uint32_t interval_id;
    uint32_t timestamp;
    uint16_t threads_ended;
    uint8_t rotate_after;
    void ***thread_plugin_data;
    corsaro_fin_interval_t *next;
};

#endif
// vim: set sw=4 tabstop=4 softtabstop=4 expandtab :
